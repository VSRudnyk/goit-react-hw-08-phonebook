{"version":3,"file":"static/js/210.9e81e16d.chunk.js","mappings":"gRAEaA,EAAYC,EAAAA,GAAAA,IAAH,+JASTC,EAAOD,EAAAA,GAAAA,KAAH,qIAQJE,EAAQF,EAAAA,GAAAA,MAAH,iEAKLG,EAASH,EAAAA,GAAAA,OAAH,yCAINI,EAAeJ,EAAAA,GAAAA,EAAH,yE,SChBnBK,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAEJE,MAAM,wBACNC,SAAS,oBACZC,SAAUJ,EAAAA,KAEPG,SAAS,yBACTE,IAAI,EAAG,sDACPC,QAAQ,WAAY,8CAGV,SAASC,IAAa,IAAD,IAClC,GAAgBC,EAAAA,EAAAA,MAATC,GAAP,eAEA,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYb,KALtBc,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,WACaC,EAJf,EAIEC,UAAaD,OAWf,OACE,SAACvB,EAAD,WACE,UAACE,EAAD,CAAMuB,SAAUJ,GARH,SAAAK,GACfV,EAAMU,GACNJ,EAAW,SACXA,EAAW,eAKT,WACE,kBAAOK,QAAQ,QAAf,oBACA,SAACxB,GAAD,QAAOyB,KAAK,OAAOC,GAAG,QAAQC,KAAK,SAAYV,EAAS,YACxD,SAACf,EAAD,oBAAekB,EAAOd,aAAtB,aAAe,EAAcsB,WAE7B,kBAAOJ,QAAQ,WAAf,uBACA,SAACxB,GAAD,QACEyB,KAAK,WACLE,KAAK,WACLD,GAAG,YACCT,EAAS,eAEf,SAACf,EAAD,oBAAekB,EAAOS,cAAtB,aAAe,EAAeD,WAC9B,SAAC3B,EAAD,CAAQwB,KAAK,SAAb","sources":["views/LoginView/LoginView.styled.js","views/LoginView/LoginView.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 1170px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 25px;\n  padding-left: 15px;\n  padding-right: 15px;\n`;\n\nexport const Form = styled.form`\n  outline: 1px solid black;\n  display: flex;\n  flex-direction: column;\n  width: 250px;\n  padding: 15px;\n`;\n\nexport const Input = styled.input`\n  width: 150px;\n  margin-bottom: 15px;\n`;\n\nexport const Submit = styled.button`\n  width: 100px;\n`;\n\nexport const ErrorMessage = styled.p`\n  margin: 0;\n  color: red;\n  font-size: 12px;\n`;\n","import { useLoginMutation } from 'redux/authAPI';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport {\n  Form,\n  Input,\n  Submit,\n  ErrorMessage,\n  Container,\n} from './LoginView.styled';\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .email('Invalid email format')\n    .required('Mail is required'),\n  password: yup\n    .string()\n    .required('No password provided.')\n    .min(8, 'Password is too short - should be 8 chars minimum.')\n    .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.'),\n});\n\nexport default function LoginView() {\n  const [logIn] = useLoginMutation();\n\n  const {\n    register,\n    handleSubmit,\n    resetField,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit = values => {\n    logIn(values);\n    resetField('email');\n    resetField('password');\n  };\n\n  return (\n    <Container>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <label htmlFor=\"email\">Email</label>\n        <Input type=\"text\" id=\"email\" name=\"email\" {...register('email')} />\n        <ErrorMessage>{errors.email?.message}</ErrorMessage>\n\n        <label htmlFor=\"password\">Password</label>\n        <Input\n          type=\"password\"\n          name=\"password\"\n          id=\"password\"\n          {...register('password')}\n        />\n        <ErrorMessage>{errors.number?.message}</ErrorMessage>\n        <Submit type=\"submit\">Log in</Submit>\n      </Form>\n    </Container>\n  );\n}\n"],"names":["Container","styled","Form","Input","Submit","ErrorMessage","schema","yup","shape","email","required","password","min","matches","LoginView","useLoginMutation","logIn","useForm","resolver","yupResolver","register","handleSubmit","resetField","errors","formState","onSubmit","values","htmlFor","type","id","name","message","number"],"sourceRoot":""}